7.1.3编程规则
1）创建子进程并结束父进程
在UNIX和类UNIX系统中，进程是通过复制（使用fork()）创建的。守护进程需要在后台独立运行。
2）设置会话ID
setsid()创建一个新会话，并使调用它的进程成为新会话的领导者，这样做的主要目的是让守护进程摆脱原来的控制终端。这样，守护进程就不会接收到终端发出的任何信号，例如挂断信号（SIGHUP），从而保证其运行不受前台用户操作的影响。
3）第二次fork()
使得守护进程不是会话领导，没有获取控制终端的能力，避免意外获取控制终端。
4）更改工作目录
将工作目录更改到根目录(/)，主要是为了避免守护进程继续占用其启动时的文件系统。这对于可移动的或网络挂载的文件系统尤其重要，确保这些文件系统不需要时可以被卸载。
5）重设文件权限掩码
调用umask(0)确保守护进程创建的文件权限不受继承的umask值的影响，守护进程可以更精确地控制其创建的文件和目录的权限。
6）关闭文件描述符
守护进程通常不需要标准输入、输出和错误文件描述符，因为它们不与终端交互。关闭这些不需要的文件描述符可以避免资源泄露，提高守护进程的安全性和效率。
7）处理信号
SIGHUP和SIGTERM信号。
SIGHUP：虽然守护进程和终端断开，但仍然有可能收到其它进程或内核发来的SIGHUP信号，守护进程不应该因为它而终止。
SIGTERM：SIGTERM信号是终止信号，用于请求守护进程优雅地终止。通过命令行执行kill <pid>命令可以发送SIGTERM信号，接收到这个信号之后，守护进程终止子进程，并清理回收资源，最后退出。
8）执行具体任务
这一步是守护进程的核心，它开始执行为其设计的特定功能，如监听网络请求、定期清理文件系统、执行系统备份等。
